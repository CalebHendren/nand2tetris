// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
	// Could not get Or16 to work, even though it was built in the last project.
	Mux16(a=x, b=false, sel=zx, out=xProcessed);
	Not16(in=xProcessed, out=nxTemp);
	Mux16(a=xProcessed, b=nxTemp, sel=nx, out=xFinal);
	Mux16(a=y, b=false, sel=zy, out=yProcessed);
	Not16(in=yProcessed, out=nyTemp);
	Mux16(a=yProcessed, b=nyTemp, sel=ny, out=yFinal);
	Add16(a=xFinal, b=yFinal, out=addResult);
	And16(a=xFinal, b=yFinal, out=andResult);
	Mux16(a=andResult, b=addResult, sel=f, out=fResult);
	Not16(in=fResult, out=noTemp);
	Mux16(a=fResult, b=noTemp, sel=no, out[0..7]=outLower, out[8..14]=outUpper, out[15]=outSign);
	Mux16(a[0..7]=outLower, a[8..14]=outUpper, a[15]=outSign, b=true, sel=false, out=out);
	Or8Way(in=outLower, out=orLower);
	Or8Way(in[0..6]=outUpper, in[7]=outSign, out=orUpper);
	Or(a=orLower, b=orUpper, out=orResult);
	Not(in=orResult, out=zr);
	Or(a=outSign, b=false, out=ng);
}